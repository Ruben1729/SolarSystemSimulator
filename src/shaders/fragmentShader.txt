#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

layout(location = 0) out vec4 out_color;
layout(location = 1) out vec4 out_bloom_color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform bool applyBloom;

void main(void) {
	
	if(applyBloom){
		out_color = texture(textureSampler, pass_textureCoords);
		out_bloom_color = out_color;
		
		return;
	}
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightNormal = normalize(toLightVector);
	
	float nDot1 = dot(unitNormal, unitLightNormal);
	float brightness = max(nDot1, 0.2);

	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightNormal;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;

	out_color = vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords) + vec4(finalSpecular, 1.0);
	out_bloom_color = vec4(0);
}